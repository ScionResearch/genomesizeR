[{"path":"https://scionresearch.github.io/genomesizeR/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to genomesizeR","title":"Contributing to genomesizeR","text":"First , thanks taking time contribute! types contributions encouraged valued. See Table Contents different ways help details project handles . Please make sure read relevant section making contribution. make lot easier us maintainers smooth experience involved. community looks forward contributions. like project, just don’t time contribute, ’s fine. easy ways support project show appreciation, also happy : - Star project - Tweet - Refer project project’s readme - Mention project local meetups tell friends/colleagues","code":""},{"path":"https://scionresearch.github.io/genomesizeR/CONTRIBUTING.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"Contributing to genomesizeR","text":"Question Want Contribute Reporting Bugs Suggesting Enhancements","code":""},{"path":"https://scionresearch.github.io/genomesizeR/CONTRIBUTING.html","id":"i-have-a-question","dir":"","previous_headings":"","what":"I Have a Question","title":"Contributing to genomesizeR","text":"want ask question, assume read available Documentation. ask question, best search existing Issues might help . case found suitable issue still need clarification, can write question issue. also advisable search internet answers first. still feel need ask question need clarification, recommend following: Open Issue. Provide much context can ’re running . Provide project platform versions (nodejs, npm, etc), depending seems relevant. take care issue soon possible.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/CONTRIBUTING.html","id":"i-want-to-contribute","dir":"","previous_headings":"","what":"I Want To Contribute","title":"Contributing to genomesizeR","text":"contributing project, must agree authored 100% content, necessary rights content content contribute may provided project license.","code":""},{"path":[]},{"path":"https://scionresearch.github.io/genomesizeR/CONTRIBUTING.html","id":"before-submitting-a-bug-report","dir":"","previous_headings":"I Want To Contribute > Reporting Bugs","what":"Before Submitting a Bug Report","title":"Contributing to genomesizeR","text":"good bug report shouldn’t leave others needing chase information. Therefore, ask investigate carefully, collect information describe issue detail report. Please complete following steps advance help us fix potential bug fast possible. Make sure using latest version. Determine bug really bug error side e.g. using incompatible environment components/versions (Make sure read documentation. looking support, might want check section). see users experienced (potentially already solved) issue , check already bug report existing bug error bug tracker. Also make sure search internet (including Stack Overflow) see users outside GitHub community discussed issue. Collect information bug: Stack trace (Traceback) OS, Platform Version (Windows, Linux, macOS, x86, ARM) Version interpreter, compiler, SDK, runtime environment, package manager, depending seems relevant. Possibly input output Can reliably reproduce issue? can also reproduce older versions?","code":""},{"path":"https://scionresearch.github.io/genomesizeR/CONTRIBUTING.html","id":"how-do-i-submit-a-good-bug-report","dir":"","previous_headings":"I Want To Contribute > Reporting Bugs","what":"How Do I Submit a Good Bug Report?","title":"Contributing to genomesizeR","text":"must never report security related issues, vulnerabilities bugs including sensitive information issue tracker, elsewhere public. Instead sensitive bugs must sent email celine.mercier@scionresearch.com. use GitHub issues track bugs errors. run issue project: Open Issue. (Since can’t sure point whether bug , ask talk bug yet label issue.) Explain behavior expect actual behavior. Please provide much context possible describe reproduction steps someone else can follow recreate issue . usually includes code. good bug reports isolate problem create reduced test case. Provide information collected previous section. ’s filed: project team label issue accordingly. team member try reproduce issue provided steps. reproduction steps obvious way reproduce issue, team ask steps mark issue needs-repro. Bugs needs-repro tag addressed reproduced. team able reproduce issue, marked needs-fix, well possibly tags (critical), issue left implemented someone.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/CONTRIBUTING.html","id":"suggesting-enhancements","dir":"","previous_headings":"I Want To Contribute","what":"Suggesting Enhancements","title":"Contributing to genomesizeR","text":"section guides submitting enhancement suggestion genomesizeR, including completely new features minor improvements existing functionality. Following guidelines help maintainers community understand suggestion find related suggestions.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/CONTRIBUTING.html","id":"before-submitting-an-enhancement","dir":"","previous_headings":"I Want To Contribute > Suggesting Enhancements","what":"Before Submitting an Enhancement","title":"Contributing to genomesizeR","text":"Make sure using latest version. Read documentation carefully find functionality already covered, maybe individual configuration. Perform search see enhancement already suggested. , add comment existing issue instead opening new one. Find whether idea fits scope aims project. ’s make strong case convince project’s developers merits feature. Keep mind want features useful majority users just small subset. ’re just targeting minority users, consider writing add-/plugin library.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/CONTRIBUTING.html","id":"how-do-i-submit-a-good-enhancement-suggestion","dir":"","previous_headings":"I Want To Contribute > Suggesting Enhancements","what":"How Do I Submit a Good Enhancement Suggestion?","title":"Contributing to genomesizeR","text":"Enhancement suggestions tracked GitHub issues. Use clear descriptive title issue identify suggestion. Provide step--step description suggested enhancement many details possible. Describe current behavior explain behavior expected see instead . point can also tell alternatives work . may want include screenshots animated GIFs help demonstrate steps point part suggestion related . can use tool record GIFs macOS Windows, tool tool Linux. Explain enhancement useful genomesizeR users. may also want point projects solved better serve inspiration.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/CONTRIBUTING.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributing to genomesizeR","text":"guide based contributing.md. Make !","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://scionresearch.github.io/genomesizeR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://scionresearch.github.io/genomesizeR/articles/compare_methods.html","id":"estimation-error","dir":"Articles","previous_headings":"","what":"1. Estimation error","title":"Comparing estimation methods","text":", display estimation error (relative true genome size) summarised method superkingdom. given match rank group, three methods average similar errors. error increases match rank. validation set used , error queries matches genus level mostly 10% 20% genome size can go 50% higher match ranks.  estimable three methods, genome size predictions general similar across methods:","code":"mycol <- c(\"#009E73\", \"#0072B2\", \"#D55E00\")  ggplot(val_all, aes(y=relative_abs_error, x=match_rank, fill=model_used, col=model_used)) +   geom_boxplot(position = position_dodge(preserve = \"single\"), outliers=FALSE) +   labs(fill=\"method\",colour=\"method\", y=\"Relative error\",x=NULL) +   facet_wrap(~sk_name) +   theme(legend.position = \"top\",         axis.text.x = element_text(angle = 45, hjust=1)) +   scale_color_manual(values = mycol) +   scale_fill_manual(values = alpha(mycol,0.4)) val_all_wide <- val_all %>%   select(sk_name, species, model_used, mean_Mbp) %>%   pivot_wider(names_from = model_used, values_from = mean_Mbp)  wm_vs_bayes <- ggplot(val_all_wide, aes(x=weighted_mean, y=Bayesian)) +   geom_point(size=1) +   geom_abline(slope=1, intercept=0, col=\"gray50\", linetype=\"dashed\") +   facet_wrap(~ sk_name, scale=\"free\") +   xlab(\"Weighted mean estimate (Mbp)\") +   ylab(\"Bayesian estimate (Mbp)\")  freq_vs_bayes <- ggplot(val_all_wide, aes(x=lmm, y=Bayesian)) +   geom_point(size=1) +   geom_abline(slope=1, intercept=0, col=\"gray50\", linetype=\"dashed\") +   facet_wrap(~ sk_name, scale=\"free\") +   xlab(\"LMM estimate (Mbp)\") +   ylab(\"Bayesian estimate (Mbp)\")  plot_grid(wm_vs_bayes,freq_vs_bayes, ncol=1)"},{"path":"https://scionresearch.github.io/genomesizeR/articles/compare_methods.html","id":"confidence-intervals","dir":"Articles","previous_headings":"","what":"2. Confidence intervals","title":"Comparing estimation methods","text":"look performance across 95% confidence interval estimated method. compare summaries width intervals relative genome size, superkingdom. intervals negligible weighted means method compared two model-based methods, 95% CI width around 50% genome size average species matched genus level. Bayesian method, confidence interval width increases dramatically match rank.  Trustworthy CI estimates translate similar observed coverage, , expect roughly 95% true values fall within 95% confidence intervals. However see Bayesian method roughly satisfies property. frequentist methods slightly underperforms weighted mean method untrustworthy uncertainty estimates.","code":"mycol <- c(\"#009E73\", \"#0072B2\", \"#D55E00\")  ggplot(val_all, aes(y=relative_half_CI95*2, x=match_rank, fill=model_used, col=model_used)) +   geom_boxplot(position = position_dodge(preserve = \"single\"), outliers=FALSE) +   labs(fill=\"method\",colour=\"method\", y=\"Relative error\",x=NULL) +   facet_wrap(~sk_name) +   theme(legend.position = \"top\",         axis.text.x = element_text(angle = 45, hjust=1)) +   scale_color_manual(values = mycol) +   scale_fill_manual(values = alpha(mycol,0.4)) qc_long <- val_all %>% group_by(model_used,match_rank_2) %>%   summarise(n=sum(!is.na(in_CI95_range)),             CI95_coverage = sum(in_CI95_range, na.rm=TRUE),             CI95_coverage_prop = CI95_coverage/n) ## `summarise()` has grouped output by 'model_used'. You can override using the ## `.groups` argument. qc_text <- qc_long %>%   mutate(CI_coverage = paste0(CI95_coverage,\"/\",n,\" (\",round(CI95_coverage_prop*100,0),\"%)\"))  qc_wide <- qc_text %>%   select(model_used,match_rank_2, CI_coverage) %>%   pivot_wider(names_from = match_rank_2, values_from = CI_coverage) names(qc_wide) <- c(\"Method\",\"95%CI coverage for match above family\",\"95%CI coverage for match at or below family\")  knitr::kable(qc_wide, format=\"markdown\")"},{"path":"https://scionresearch.github.io/genomesizeR/articles/compare_methods.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"3. Conclusion","title":"Comparing estimation methods","text":"strengths limitation method outlined . emphasize weighted mean method suitable taxa well-characterised low taxonomic levels uncertainty bounds minor interest. major advantage method can used queries several potential taxonomic matches. Bayesian method solid method especially quantifying uncertainty around estimated means obtaining estimates taxa well represented low ranks NCBI database.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/articles/example.html","id":"example-using-default-bayesian-method-on-example-file","dir":"Articles","previous_headings":"","what":"Example using default bayesian method on example file","title":"Example","text":"example data subset dataset @Labouyrie2023-yc. First, genome sizes predicted taxa:","code":"results = estimate_genome_size(example_input_file, sep='\\t', match_column='TAXID', output_format='input', ci_threshold = 0.3)      #############################################################################   # Genome size estimation summary:   #   #  22.22222 % estimations achieving required precision   #        Min.   1st Qu.    Median      Mean   3rd Qu.      Max.      3007721   5408472  16980834  23969767  41811396 143278734       # Estimation status:   Confidence interval to estimated size ratio > ci_threshold                                                         OK                                                           140                                                         40"},{"path":"https://scionresearch.github.io/genomesizeR/articles/example.html","id":"plot-genome-size-histogram-per-sample","dir":"Articles","previous_headings":"","what":"Plot genome size histogram per sample","title":"Example","text":", results can visualized using plotting functions provided. histogram shows estimated genome sizes sample.","code":"plotted_df = plot_genome_size_histogram(results)"},{"path":"https://scionresearch.github.io/genomesizeR/articles/example.html","id":"plot-genome-size-histogram-for-one-sample","dir":"Articles","previous_headings":"","what":"Plot genome size histogram for one sample","title":"Example","text":"","code":"plotted_df = plot_genome_size_histogram(results, only_sample='16S_1')"},{"path":"https://scionresearch.github.io/genomesizeR/articles/example.html","id":"plot-genome-size-boxplot-per-sample","dir":"Articles","previous_headings":"","what":"Plot genome size boxplot per sample","title":"Example","text":"boxplot shows estimated genome sizes sample:","code":"plotted_df = plot_genome_size_boxplot(results)"},{"path":"https://scionresearch.github.io/genomesizeR/articles/example.html","id":"plot-genome-size-boxplot-for-one-sample","dir":"Articles","previous_headings":"","what":"Plot genome size boxplot for one sample","title":"Example","text":"","code":"plotted_df = plot_genome_size_boxplot(results, only_sample='ITS_1')"},{"path":"https://scionresearch.github.io/genomesizeR/articles/example.html","id":"plot-simplified-taxonomic-tree-with-colour-coded-estimated-genome-sizes","dir":"Articles","previous_headings":"","what":"Plot simplified taxonomic tree with colour-coded estimated genome sizes","title":"Example","text":"tree shows taxonomic relationships well estimated genome sizes. difference genome size distribution bacteria (16S marker) fungi (marker) visible.","code":"plotted_df = plot_genome_size_tree(results, refdata_archive_path) ## Untarring reference data ## Using reference data in: /tmp/RtmpzO6rdM/refdata ## Untarring taxonomy ## Using taxonomy: /tmp/RtmpzO6rdM/taxdump"},{"path":"https://scionresearch.github.io/genomesizeR/articles/genomesizeR.html","id":"simple-tutorial-using-default-bayesian-method-on-example-file","dir":"Articles","previous_headings":"","what":"Simple tutorial using default bayesian method on example file","title":"Get started","text":"already done, download archive containing reference databases bayesian models zenodo.org, using inborutils package. can change path option want download archive (default current directory ‘.’): Store path archive containing reference databases bayesian models: Read example input file package. example data subset dataset Labouyrie et al. 2023: Load package: Run main function get estimated genome sizes (default method bayesian method):","code":"remotes::install_github(\"inbo/inborutils\") inborutils::download_zenodo(\"10.5281/zenodo.13733183\", path=\".\") refdata_archive_path = \"path/to/genomesizeRdata.tar.gz\" example_input_file = system.file(\"extdata\", \"example_input.csv\", package = \"genomesizeR\") library(genomesizeR) results = estimate_genome_size(example_input_file, refdata_archive_path,              sep='\\t', match_column='TAXID', output_format='input',              ci_threshold = 0.3)      #############################################################################   # Genome size estimation summary:   #   #  22.22222 % estimations achieving required precision   #        Min.   1st Qu.    Median      Mean   3rd Qu.      Max.      3007721   5408472  16980834  23969767  41811396 143278734       # Estimation status:   Confidence interval to estimated size ratio > ci_threshold      OK                                                           140      40"},{"path":"https://scionresearch.github.io/genomesizeR/articles/genomesizeR.html","id":"plot-genome-size-histogram-per-sample","dir":"Articles","previous_headings":"","what":"Plot genome size histogram per sample","title":"Get started","text":", results can visualized using plotting functions provided. histogram shows estimated genome sizes sample.","code":"plotted_df = plot_genome_size_histogram(results)"},{"path":"https://scionresearch.github.io/genomesizeR/articles/genomesizeR.html","id":"plot-genome-size-histogram-for-one-sample","dir":"Articles","previous_headings":"","what":"Plot genome size histogram for one sample","title":"Get started","text":"","code":"plotted_df = plot_genome_size_histogram(results, only_sample='16S_1')"},{"path":"https://scionresearch.github.io/genomesizeR/articles/genomesizeR.html","id":"plot-genome-size-boxplot-per-sample","dir":"Articles","previous_headings":"","what":"Plot genome size boxplot per sample","title":"Get started","text":"boxplot shows estimated genome sizes sample:","code":"plotted_df = plot_genome_size_boxplot(results)"},{"path":"https://scionresearch.github.io/genomesizeR/articles/genomesizeR.html","id":"plot-genome-size-boxplot-for-one-sample","dir":"Articles","previous_headings":"","what":"Plot genome size boxplot for one sample","title":"Get started","text":"","code":"plotted_df = plot_genome_size_boxplot(results, only_sample='ITS_1')"},{"path":"https://scionresearch.github.io/genomesizeR/articles/genomesizeR.html","id":"plot-simplified-taxonomic-tree-with-colour-coded-estimated-genome-sizes","dir":"Articles","previous_headings":"","what":"Plot simplified taxonomic tree with colour-coded estimated genome sizes","title":"Get started","text":"tree shows taxonomic relationships well estimated genome sizes. difference genome size distribution bacteria (16S marker) fungi (marker) visible.","code":"plotted_df = plot_genome_size_tree(results, refdata_archive_path) ## Untarring reference data ## Using reference data in: /tmp/RtmpI7shhc/refdata ## Untarring taxonomy ## Using taxonomy: /tmp/RtmpI7shhc/taxdump"},{"path":"https://scionresearch.github.io/genomesizeR/articles/input_output.html","id":"input","dir":"Articles","previous_headings":"","what":"Input","title":"About the input and the output","text":"estimate_genome_size() function genomesizeR accepts input formats: - csv-like file column containing either NCBI taxids taxon names (format='csv' option, specify sep, match_column match_sep needed), e.g.: input.csv: - common ‘taxonomy table’ format used popular packages phyloseq (format='tax_table' option) e.g.: input.csv: tax_table object can also directly used input, e.g.: - file BIOM format (format='biom' option) e.g.: input.biom: - table-like object (data.frame, matrix…) column containing either NCBI taxids taxon names (format='dataframe' option) e.g.: - vector containing either NCBI taxids taxon names (format='vector' option) e.g.:","code":"Id,Taxid,Taxon_name 1,562,Escherichia coli 2,9606,Homo sapiens output = estimate_genome_size('input.csv', 'genomesizeRdata.tar.gz',                                format='csv', sep=',', match_column='Taxid')  OR  output = estimate_genome_size('input.csv', 'genomesizeRdata.tar.gz',                                format='csv', sep=',', match_column='Taxon_name') TaxonID,Kingdom,Phylum,Class,Order,Family,Genus,Species taxon1,Bacteria,Proteobacteria,Gammaproteobacteria,Enterobacterales,Enterobacteriaceae,Escherichia,Escherichia coli taxon2,Eukaryota,Chordata,Mammalia,Primates,Hominidae,Homo,Homo sapiens output = estimate_genome_size('input.csv', 'genomesizeRdata.tar.gz',                                format='tax_table', sep=',') library(phyloseq) taxmat = read.csv(\"input.csv\", row.names = 1, stringsAsFactors = FALSE) taxmat = as.matrix(taxmat) tax_tab = tax_table(taxmat)  output = estimate_genome_size(tax_tab, 'genomesizeRdata.tar.gz',                                format='tax_table') {   \"id\": null,   \"format\": \"Biological Observation Matrix 1.0.0\",   \"format_url\": \"http://biom-format.org\",   \"type\": \"OTU table\",   \"generated_by\": \"example\",   \"date\": \"2025-10-02T00:00:00\",   \"matrix_type\": \"dense\",   \"matrix_element_type\": \"int\",   \"shape\": [2, 1],   \"rows\": [     {       \"id\": \"taxon1\",       \"metadata\": {         \"taxonomy\": [           \"k__Bacteria\",           \"p__Proteobacteria\",           \"c__Gammaproteobacteria\",           \"o__Enterobacterales\",           \"f__Enterobacteriaceae\",           \"g__Escherichia\",           \"s__Escherichia coli\"         ]       }     },     {       \"id\": \"taxon2\",       \"metadata\": {         \"taxonomy\": [           \"k__Eukaryota\",           \"p__Chordata\",           \"c__Mammalia\",           \"o__Primates\",           \"f__Hominidae\",           \"g__Homo\",           \"s__Homo sapiens\"         ]       }     }   ],   \"columns\": [     { \"id\": \"sample1\", \"metadata\": null }   ],   \"data\": [1, 1] } output = estimate_genome_size('input.biom', 'genomesizeRdata.tar.gz',                                format='biom') input_table = data.frame(                 Taxid = c(562, 9606),                 Taxon_name = c(\"Escherichia coli\", \"Homo sapiens\"),                 stringsAsFactors = FALSE               )  # input_table: #   Taxid       Taxon_name # 1   562 Escherichia coli # 2  9606     Homo sapiens  output = estimate_genome_size(input_table, 'genomesizeRdata.tar.gz',                                format='dataframe', match_column='Taxid') input_vector = c(\"Escherichia coli\", \"Homo sapiens\")  output = estimate_genome_size(input_vector, 'genomesizeRdata.tar.gz',                                format='vector')"},{"path":"https://scionresearch.github.io/genomesizeR/articles/input_output.html","id":"reference-database","dir":"Articles","previous_headings":"","what":"Reference database","title":"About the input and the output","text":"genome size reference database used built querying genome metadata information curated NCBI RefSeq database. Filters applied keep full genomes, discard data NCBI tagged anomalous, abnormally large small. raw database prepared include pre-computed information used package. Genome sizes aggregated species level iteratively averaging entries , hence package can provide estimates level species .","code":""},{"path":"https://scionresearch.github.io/genomesizeR/articles/input_output.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"About the input and the output","text":"output format data frame columns input input standard data frame, added columns providing information estimation quality estimation. option also allows output format containing estimation information (TAXID, estimated_genome_size, confidence_interval_lower, confidence_interval_upper, genome_size_estimation_status, model_used). Columns added: estimated_genome_size: Estimated genome size confidence_interval_lower: Lower limit confidence interval confidence_interval_upper: Upper limit confidence interval ‘Query NA’: query’s taxon read input ‘NCBI taxid found’: query’s taxon found database ‘Parent taxids found’: taxa ranks query’s taxon computed ‘Parent taxid ranks found’: ranks taxa query’s taxon computed ‘enough genome size references close taxa’: weighted mean method, references found close enough taxonomic tree query estimate genome size ‘Confidence interval estimated size ratio > ci_threshold’: ratio confidence interval estimated size greater chosen threshold ‘compute confidence interval’: genome size successfully estimated, confidence interval estimated ‘reference query high taxonomic tree fit model’: lmm model able estimate genome size query ‘Bayesian model found’: issue loading bayesian models model_used: model used estimation LCA: queries made list taxa, taxid Last Common Ancestor. Otherwise, LCA equal TAXID. NCBI taxids taxonomic ranks, one column per rank genome_size_estimation_rank: Rank parent taxon used estimation (weighted mean method ) genome_size_estimation_distance: Distance tree nodes (ranks) query parent taxon used estimation (weighted mean method )","code":""},{"path":"https://scionresearch.github.io/genomesizeR/articles/methods.html","id":"bayesian-method","dir":"Articles","previous_headings":"","what":"Bayesian method","title":"Method description","text":"NCBI database species known genome sizes split superkingdom (Bacteria, Archeae, Eukaryotes). distributional Bayesian linear hierarchical model using brm function brms package fitted superkingdom dataset. general model structure outlined corresponds exactly complex model, implemented Bacteria superkingdom. general model simplified dropping class group effect standard deviation model Eukaryote superkingdom, dropping class phylum group effect standard deviation model Archeae superkingdom. latter therefore addressed using distributional model, response variance predictor. log(Gi)∼𝒩(μi,σi2)\\begin{gather*} log(G_i) \\sim \\mathcal{N}(\\mu_i, \\sigma_{}^2) \\end{gather*} GiG_i genome size species ii units 10 Mbp. model uses predictors mean standard deviation. mean modelled follows: μi=α0+αgenusg[]+αfamilyf[]+αordero[]+αclassc[]+αphylump[]αgenusg[]∼𝒩(0,σgenus2)αfamilyf[]∼𝒩(0,σfamily2)αordero[]∼𝒩(0,σorder2)αclassc[]∼𝒩(0,σclass2)αphylump[]∼𝒩(0,σphylum2)\\begin{gather*} \\mu_i = \\alpha_0 + \\alpha_{genus_{g[]}} + \\alpha_{family_{f[]}} + \\alpha_{order_{o[]}} + \\alpha_{class_{c[]}} + \\alpha_{phylum_{p[]}}  \\\\ \\alpha_{genus_{g[]}} \\sim \\mathcal{N}(0, \\sigma_{genus}^2) \\\\ \\alpha_{family_{f[]}} \\sim \\mathcal{N}(0, \\sigma_{family}^2) \\\\ \\alpha_{order_{o[]}} \\sim \\mathcal{N}(0, \\sigma_{order}^2) \\\\ \\alpha_{class_{c[]}} \\sim \\mathcal{N}(0, \\sigma_{class}^2) \\\\ \\alpha_{phylum_{p[]}} \\sim \\mathcal{N}(0, \\sigma_{phylum}^2) \\\\ \\end{gather*} following prior distributions used: α0∼𝒩(0,5)(σgenus,σfamily,σorder,σclass,σphylum,sclass,sphylum)∼𝒩+(0,1)\\begin{gather*} \\alpha_0 \\sim \\mathcal{N}(0,5) \\\\ (\\sigma_{genus},\\sigma_{family},\\sigma_{order},\\sigma_{class},\\sigma_{phylum},s_{class},s_{phylum}) \\sim \\mathcal{N}^+(0,1) \\\\ \\end{gather*} Differences genome size variability observed among taxa, therefore model also adds predictors standard deviation response. standard deviation modelled follows: log(σi)=λ0+λclassc[]+λphylump[]λclassc[]∼𝒩(0,sclass2)λphylump[]∼𝒩(0,sphylum2)\\begin{gather*} log(\\sigma_{}) = \\lambda_0 + \\lambda_{class_{c[]}} + \\lambda_{phylum_{p[]}} \\\\ \\lambda_{class_{c[]}} \\sim \\mathcal{N}(0, s_{class}^2) \\\\ \\lambda_{phylum_{p[]}} \\sim \\mathcal{N}(0, s_{phylum}^2) \\\\ \\end{gather*} priors λ0∼𝒩(0,1)(sclass,sphylum)∼𝒩+(0,1)\\begin{gather*} \\lambda_0 \\sim \\mathcal{N}(0,1) \\\\ (s_{class},s_{phylum}) \\sim \\mathcal{N}^+(0,1) \\\\ \\end{gather*} 𝒩+\\mathcal{N}^+ normal distribution truncated positive values. g[]g[],f[]f[],o[]o[],c[]c[] p[]p[] respectively index genus, family, order, class, phylum entry ii species-level database. Note taxonomic groups naturally nested within indices designed unique particular taxonomic group represents. estimation process uses Stan’s Hamiltonian Monte Carlo algorithm U-turn sampler. Posterior predictions obtained using predict function brms package, 95% credible intervals obtained using 2.5% 97.5% quantiles posterior distribution. Queries corresponding identified species available genome size estimate NCBI database get allocated genome size value database (averaged species level) 95% confidence intervals calculated based standard error mean genome sizes available species processed NCBI database.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/articles/methods.html","id":"frequentist-method","dir":"Articles","previous_headings":"","what":"Frequentist method","title":"Method description","text":"frequentist linear mixed-effects model using lmer function lme4 package fitted NCBI database species known genome sizes. model follows: log(Gi)=α0+αgenusg[]+αfamilyf[]+ei\\begin{gather*} log(G_i) =  \\alpha_0 + \\alpha_{genus_{g[]}} +  \\alpha_{family_{f[]}} + e_i \\\\ \\end{gather*} α0\\alpha_0 overall mean, αgenusg[]\\alpha_{genus_{g[]}} αfamilyf[]\\alpha_{family_{f[]}} random effect genus family genus g[]g[] family f[]f[] eie_i residual error observation ii. estimation process using restricted maximum likelihood method (REML). prediction interval computed using predictInterval function merTools package. higher nested levels (order, class) taken account model, predictions produced queries family level.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/articles/methods.html","id":"weighted-mean-method","dir":"Articles","previous_headings":"","what":"Weighted mean method","title":"Method description","text":"weighted mean method computes genome size query averaging known genome sizes surrounding taxa taxonomic tree, weighted system neighbours less weight computed mean. identification related taxa limited levels including order. queries relating well-characterised species many genetic studies performed, model organisms, might lead precise predictions two methods. method can also perform better others queries consist lists taxa (example, output blastn several matches can obtained query). Otherwise, suggest using one methods, confidence intervals calculated less reliable weighted mean method.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/articles/methods.html","id":"pseudocode-describing-the-weighted-mean-method-computation","dir":"Articles","previous_headings":"Weighted mean method","what":"Pseudocode describing the weighted mean method computation:","title":"Method description","text":"","code":"# 1. Build table of parent information  for each match (a query can be a list of matches e.g. blast result):   get the taxid associated   get the list of parents and their ranks   for each parent :     if higher than order rank:        STOP and return 'Not enough genome size references for close taxa'     if genome size associated with that taxon in the reference database:       store it in a 'parent information table'       store the distance as well (number of nodes between query and this taxon)       if we have more than one genome that contributed to the data we have in the 'parent information table':         STOP the iteration through parents here     if the query is a list of matches and we have reached their common ancestor:       STOP the iteration through parents here  # 2. Compute weighted mean from the table of parent information  estimated_size = 0 estimated_standard_error = 0 sum_weights = 0 for each line of parent information:   weight = 1.0/(distance+1)   sum_weights = sum_weights + weight   estimated_size = estimated_size + weight * genome_size   estimated_standard_error = estimated_standard_error + (weight * precomputed_standard_error)**2 estimated_size = estimated_size / sum_of_all_weights standard_error = square_root(estimated_standard_error) Z = 1.96 # 95% CI margin_of_error = Z * standard_error confidence_interval_lower = estimated_size - margin_of_error confidence_interval_upper = estimated_size + margin_of_error"},{"path":"https://scionresearch.github.io/genomesizeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Celine Mercier. Author, maintainer. Joane Ellouet. Author.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mercier C, Elleouet J, Garrett L, Wakelin SA (2024). “genomesizeR: R package genome size prediction.” bioRxiv. doi:10.1101/2024.09.08.611926.","code":"@Article{,   title = {genomesizeR: An R package for genome size prediction},   author = {Celine Mercier and Joane Elleouet and Loretta Garrett and Steve A Wakelin},   journal = {bioRxiv},   year = {2024},   doi = {10.1101/2024.09.08.611926}, }"},{"path":[]},{"path":"https://scionresearch.github.io/genomesizeR/index.html","id":"about-the-package","dir":"","previous_headings":"","what":"About the package","title":"Genome size estimation","text":"R package uses statistical modelling data NCBI databases provides three statistical methods genome size prediction given taxon, group taxa. straightforward weighted mean method identifies closest taxa available genome size information taxonomic tree averages genome sizes using weights based taxonomic distance. frequentist random effect model uses nested genus family information output genome size estimates. Finally, third option provides predictions distributional Bayesian multilevel model uses taxonomic information genus way superkingdom, therefore providing estimates uncertainty bounds even -represented taxa. three methods use: list queries; query taxon list several taxa. reference database containing known genome sizes, built NCBI databases, associated taxa. taxonomic tree structure built NCBI. genomesizeR retrieves taxonomic classification input queries, estimates genome size query, provides 95% confidence intervals estimate.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install","title":"Genome size estimation","text":"Prerequisites: R already installed packages --date, git Run one commands R console install package. include four different installation methods, setups (example, corporate networks) may block specific download mechanisms: also need download archive containing reference databases bayesian models zenodo.org, using inborutils package. can change path option want download archive (default current directory ‘.’):","code":"install.packages(\"remotes\") remotes::install_github(\"https://github.com/ScionResearch/genomesizeR\")  - OR -  install.packages(\"remotes\") remotes::install_git(\"https://github.com/ScionResearch/genomesizeR\")  - OR -  install.packages(\"devtools\") devtools::install_github(\"ScionResearch/genomesizeR\")  - OR -  install.packages(\"pak\") pak::pkg_install(\"git::https://github.com/ScionResearch/genomesizeR\") remotes::install_github(\"inbo/inborutils\") inborutils::download_zenodo(\"10.5281/zenodo.13733183\", path=\".\")"},{"path":"https://scionresearch.github.io/genomesizeR/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get started","title":"Genome size estimation","text":"simple tutorial using default bayesian method example file","code":""},{"path":"https://scionresearch.github.io/genomesizeR/index.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute","title":"Genome size estimation","text":"Contribution guidelines genomesizeR","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/build_lmm_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a frequentist random effect model using nested effects — build_lmm_model","title":"Build a frequentist random effect model using nested effects — build_lmm_model","text":"Build frequentist random effect model using nested effects","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/build_lmm_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a frequentist random effect model using nested effects — build_lmm_model","text":"","code":"build_lmm_model(size_db, effects)"},{"path":"https://scionresearch.github.io/genomesizeR/reference/build_lmm_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a frequentist random effect model using nested effects — build_lmm_model","text":"size_db Genome size reference database effects Vector nested effects use formula e.g. c(\"family\", \"genus\")","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/estimate_genome_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate genome sizes — estimate_genome_size","title":"Estimate genome sizes — estimate_genome_size","text":"function loads query file table archive containing reference databases bayesian models, predicts genome sizes.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/estimate_genome_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate genome sizes — estimate_genome_size","text":"","code":"estimate_genome_size(   queries,   refdata_path,   format = \"csv\",   sep = \",\",   match_column = NA,   match_sep = \";\",   output_format = \"input\",   method = \"bayesian\",   ci_threshold = 0.3,   n_cores = \"half\" )"},{"path":"https://scionresearch.github.io/genomesizeR/reference/estimate_genome_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate genome sizes — estimate_genome_size","text":"queries Queries: path csv BIOM file, R object used input. refdata_path Path downloadable archive containing reference databases bayesian models. format Input format: \"csv\" csv file (default), \"tax_table\" taxonomy table file object used e.g. phyloseq, \"biom\" BIOM file, \"dataframe\" table-style object (e.g. data.frame matrix object), \"vector\" vector object. sep table-style csv format, column separator (default: \",\"). match_column table-style csv format, column containing match information (one several matches). match_sep table-style csv format several matches match column, separator matches (default: \";\"). output_format Format output . Default: \"input\" data frame columns input, added columns: \"TAXID\", \"estimated_genome_size\", \"confidence_interval_lower\", \"confidence_interval_upper\", \"genome_size_estimation_status\", \"model_used\", well taxids ranks. formats available: \"data.frame\", data frame previously described columns, without \"taxids ranks\" columns. method Method use genome size estimation, 'bayesian' (default), 'weighted_mean' 'lmm'. ci_threshold Threshold confidence interval proportion predicted size (e.g. 0.3 means estimations confidence interval represents 30% predicted size tagged output table). n_cores Number CPU cores use (default 'half': half available cores).","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_bayes_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Read bayesian model from rds file — get_bayes_model","title":"Read bayesian model from rds file — get_bayes_model","text":"Read bayesian model rds file","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_bayes_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read bayesian model from rds file — get_bayes_model","text":"","code":"get_bayes_model(superkingdom)"},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_bayes_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read bayesian model from rds file — get_bayes_model","text":"superkingdom Target superkingdom, taxid name","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_genome_size_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Read genome size database — get_genome_size_db","title":"Read genome size database — get_genome_size_db","text":"Read genome size database","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_genome_size_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read genome size database — get_genome_size_db","text":"","code":"get_genome_size_db(genome_size_db_path = NA)"},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_genome_size_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read genome size database — get_genome_size_db","text":"genome_size_db_path Path genome size database file NA","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_genome_size_db_for_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Read genome size database for lmm model — get_genome_size_db_for_lmm","title":"Read genome size database for lmm model — get_genome_size_db_for_lmm","text":"Read genome size database lmm model","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_genome_size_db_for_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read genome size database for lmm model — get_genome_size_db_for_lmm","text":"","code":"get_genome_size_db_for_lmm(genome_size_db_path = NA)"},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_genome_size_db_for_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read genome size database for lmm model — get_genome_size_db_for_lmm","text":"genome_size_db_path Path genome size database file NA","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_refdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Untar reference data archive containing reference databases and bayesion models — get_refdata","title":"Untar reference data archive containing reference databases and bayesion models — get_refdata","text":"Untar reference data archive containing reference databases bayesion models","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_refdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Untar reference data archive containing reference databases and bayesion models — get_refdata","text":"","code":"get_refdata(refdata_path)"},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_refdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Untar reference data archive containing reference databases and bayesion models — get_refdata","text":"refdata_path Path tar.gz archive","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Read taxonomy database — get_taxonomy","title":"Read taxonomy database — get_taxonomy","text":"Read taxonomy database","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read taxonomy database — get_taxonomy","text":"","code":"get_taxonomy(taxonomy_path = NA)"},{"path":"https://scionresearch.github.io/genomesizeR/reference/get_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read taxonomy database — get_taxonomy","text":"taxonomy_path Path taxonomy database file NA","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/plot_genome_size_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot genome size boxplot — plot_genome_size_boxplot","title":"Plot genome size boxplot — plot_genome_size_boxplot","text":"function loads result table estimate_genome_size plots boxplot estimated genome sizes.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/plot_genome_size_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot genome size boxplot — plot_genome_size_boxplot","text":"","code":"plot_genome_size_boxplot(   output_table,   sample_data = NA,   only_sample = NA,   PA = F )"},{"path":"https://scionresearch.github.io/genomesizeR/reference/plot_genome_size_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot genome size boxplot — plot_genome_size_boxplot","text":"output_table Result table estimate_genome_size sample_data file dataframe containing sample information (sample name count) only_sample sample plot genome size boxplot (default: NA, samples) PA Use presence/absence data instead abundance data (counts set 1)","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/plot_genome_size_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot genome size histogram — plot_genome_size_histogram","title":"Plot genome size histogram — plot_genome_size_histogram","text":"function loads result table estimate_genome_size plots histogram estimated genome sizes.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/plot_genome_size_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot genome size histogram — plot_genome_size_histogram","text":"","code":"plot_genome_size_histogram(   output_table,   sample_data = NA,   only_sample = NA,   bins = 50,   PA = F )"},{"path":"https://scionresearch.github.io/genomesizeR/reference/plot_genome_size_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot genome size histogram — plot_genome_size_histogram","text":"output_table Result table estimate_genome_size() sample_data file dataframe containing sample information (sample name count) only_sample sample plot genome size histogram (default: NA, samples) bins Histogram bin parameter PA Use presence/absence data instead abundance data (counts set 1)","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/plot_genome_size_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot genome size tree — plot_genome_size_tree","title":"Plot genome size tree — plot_genome_size_tree","text":"function loads result table estimate_genome_size plots taxonomic tree colour-coded estimated genome sizes.","code":""},{"path":"https://scionresearch.github.io/genomesizeR/reference/plot_genome_size_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot genome size tree — plot_genome_size_tree","text":"","code":"plot_genome_size_tree(output_table, refdata_path)"},{"path":"https://scionresearch.github.io/genomesizeR/reference/plot_genome_size_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot genome size tree — plot_genome_size_tree","text":"output_table Result table estimate_genome_size refdata_path Path downloadable archive containing reference databases bayesian models","code":""}]
